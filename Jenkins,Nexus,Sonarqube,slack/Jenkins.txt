URL:JenkinsServerIP:8080

Manage jenkins > Plugins:
    Maven Integration
    Github Integration
    Nexus Artifact Uploader
    SonarQube Scanner
    Slack Notification
    Build Timestamp
    
Manage jenkins > Tools:
    JDK Installation
        Name: OracleJDK11
        Java_Home: /usr/lib/jvm/java-1.11.0-openjdk-adm64

        Name: OracleJDK8
        Java_Home: /usr/lib/jvm/java-1.8.0-openjdk-adm64
    (Make sure you have both versions installed on Jenkins Server)

    Maven Installation
        Name: MAVEN3
        Version

    SonarQube Scanner
        Name: sonarscanner

Configure System
    SonarQube Server
        environment variables
        Name:sonarserver
        Server URL: http://SonarServerPrivateIP
        Auth token: secret text
        ID: sonartoken
        (create the token on sonarqube page)

    Build Timestap
        Configure Timezone and pattern

    Slack
        Add workspace
        Credentials:
            Secret text
            Jenkins CI slack app secret token
            ID
        Add channel (starts with #)

Manage jenkins > Credentials > System > Global credentials
    Username and password
        username:
        password:
        ID: nexuslogin
        Description = ID

Jenkins PIPELINE: File in github repo called Jenkinsfile
def COLOR_MAP = [
    'SUCCESS': 'good',
    'FAILURE': 'danger'
]

pipline {
    agent any
    tools {
        maven "MAVEN3"
        jdk "OracleJDK8"
    }

    environment {
        SNAP_REPO = 'project-snapshot'
        NEXUS_USER = 'admin'
        NEXUS_PASS = 'admin123'
        RELEASE_REPO = 'project-release'
        CENTRAL_REPO = 'project-maven-central'
        NEXUSIP = 'NexusServerPrivateIP'
        NEXUSPORT = '8081'
        NEXUS_GRP_REPO = 'project-maven-group'
        NEXUS_LOGIN = 'nexuslogin'
        SONARSERVER = 'sonarserver'
        SONARSCANNER = 'sonarscanner'
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "172.31.40.209:8081"
        NEXUS_REPOSITORY = "project-release"
	    NEXUS_REPOGRP_ID = "project-grp-repo"
        NEXUS_CREDENTIAL_ID = "nexuslogin"
        ARTVERSION = "${env.BUILD_ID}'${env.BUILD_TIMESTAMP}"
    }

    stages {
        stage('Build'){
            steps {
                sh 'mvn -s settings.xml -DskipTests install'
            }
            post {
                success {
                    echo 'Now Archiving...'
                    archiveArtifacts artifacts: '**/target/*.war'
                }
            }
        }
        stage('Test'){
            steps {
                sh 'mvn test'
            }
        }

        stage ('checkstyle Analysis'){
            steps {
                sh 'mvn -s settings.xml checkstyle:checkstyle'
            }
            post {
                success {
                    echo 'Generated Analysis Result'
                }
            }
        }
        stage('Sonar Analysis') {
		  environment {
             scannerHome = tool "${SONARSCANNER}"
          }
          steps {
            withSonarQubeEnv("${SONARSERVER}") {
               sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                   -Dsonar.projectName=project \
                   -Dsonar.projectVersion=1.0 \
                   -Dsonar.sources=src/ \
                   -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                   -Dsonar.junit.reportsPath=target/surefire-reports/ \
                   -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                   -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
                }
            }
        }
        stage("Quality Gate") {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
               waitForQualityGate abortPipeline: true
                }
            }
        }
        stage("Publish to Nexus Repository Manager") {
            steps {
                nexusArtifactUploader(
                    nexusVersion: "${NEXUS_VERSION}",
                    protocol: "${NEXUS_PROTOCOL}",
                    nexusUrl: "${NEXUS_URL}",
                    groupId: "${NEXUS_REPOGRP_ID}",
                    version: "${ARTVERSION}",
                    repository: "${NEXUS_REPOSITORY}",
                    credentialsId: "${NEXUS_CREDENTIAL_ID}",
                    artifacts: [
                        [artifactId: 'projectapp',
                        classifier: '',
                        file: 'target/project-v2.war',
                        type: 'war']
                    ]
                );
            }
        }
    }
    post {
        always {
            echo 'Slack Notification.'
            slackSend channel: '#Jenkinscicd',
                color: COLOR_MAP[currentBuild.currentResult],
                message: "${currentBuild.currentResult}:* Job ${env.JOB_NAME} build ${env.BUILD_NUMBER} \n More info at: ${env.BUILD_URL}"
        }
    }
}


Jenkins Dashboard > New item:
    Name:project-ci-pipline
    pipline
    pipline script from SCM
    SCM: git
    Create Jenkins user for Github
        SSH username with private key
        ID: githublogin
        Description = ID
        add private ssh key
    Build settings
        Github hook trigger for GITScm polling

Github > repository > settings > Webhooks:
    Payload URL: JenkinsServerIP:8080/github-webhook/
    Content type: application/json